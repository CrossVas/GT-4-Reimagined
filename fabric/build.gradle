archivesBaseName = "${rootProject.antimatter_archive_base_name}-fabric"
version = "${rootProject.minecraft_version}-${project.mod_version}"

def generatedResources = file("src/generated/resources")
def accessWidenerFile = project(":antimatter-common").file("src/main/resources/antimatter.accesswidener")

loom {
    accessWidenerPath = accessWidenerFile
}

sourceSets {
    main {
        resources {
            srcDir generatedResources
        }
    }
}

dependencies{
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    common(project(path: ":tesseract-common", configuration: "namedElements")) { transitive false }
    common(project(path: ":antimatter-common", configuration: "namedElements")) { transitive false }
    common(project(path: ":tesseract-fabric", configuration: "namedElements")) { transitive false }
    common(project(path: ":antimatter-fabric", configuration: "namedElements")) { transitive false }
    modImplementation("com.github.FeltMC.Fabricated-Forge-API:fabricated-forge-caps:${rootProject.fabricated_forge_hash}") { transitive false }
    //modImplementation(include("com.github.FeltMC.Fabricated-Forge-API:fabricated-forge-recipe-api:${rootProject.fabricated_forge_hash}")) { transitive false }
    //modImplementation(include("com.github.FeltMC.Fabricated-Forge-API:fabricated-forge-modeldata:${rootProject.fabricated_forge_hash}")) { transitive false }
    //include("com.github.FeltMC.Fabricated-Forge-API:fabricated-forge-datagen:${rootProject.fabricated_forge_hash}") { transitive false }
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
    modCompileOnly("io.github.fabricators_of_create:Porting-Lib:1.1.310-beta+1.18.2-dev.${rootProject.port_lib_hash}"){ transitive(false) }
    /*modApi("teamreborn:energy:${project.energy_version}") {
        transitive = false
    }*/
    implementation("com.github.Trinsdar:forgeconfigapiport-fabric:abc19f9a99"){
        transitive = false
    }
}

architectury {
    fabric()
}

task copyAccessWidener(type: Copy) {
    from accessWidenerFile
    into generatedResources
}

processResources {
    //dependsOn copyAccessWidener

    def toReplace = [
            "version"             : project.version
    ]

    inputs.properties toReplace
    filesMatching("fabric.mod.json") {
        expand toReplace
    }
}
sourcesJar {
    def commonSources = project(":antimatter-common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

/*
publishing {
    tasks.publish.dependsOn "build", "reobfJar"
    publications {
        mavenJava(org.gradle.api.publish.maven.MavenPublication) {
            //artifactId = archivesBaseName
            artifact shadowJar
        }
    }
    repositories {
        if (rootProject.isCI && rootProject.isRELEASE) {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/GregTech-Intergalactical/TesseractAPI"
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        } else {
            maven { url "file:///${project.projectDir}/mcmodsrepo"}
        }
    }
    //repositories {
    //    rootProject.configurePublishingRepositories(delegate)
    //}
}*/
