buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        jcenter()
        mavenCentral()
        gradlePluginPortal()
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
        maven { url 'https://dvs1.progwml6.com/files/maven' }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

repositories {
    maven { url = 'https://libraries.minecraft.net/' }
    mavenCentral()
    maven { url = 'https://maven.minecraftforge.net/' }
    maven { url 'https://dvs1.progwml6.com/files/maven' }
    maven {
        url "https://maven.tterrag.com/"
    }
    maven {
        url = "https://maven.speiger.com/repository/main"
    }
    maven {
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url 'https://jitpack.io' }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mod_version}"
group = 'trinsdar.gt4r' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'gt4r'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)
//Print out JVM information so that we know what version is running. Extreamly useful for people to know when helping you.
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            include '**/**'
            srcDirs += 'src/generated/resources'
            exclude '.cache'
            exclude 'Thumbs.db'
        }
    }
}

def isVSTask() {
    return gradle.startParameter.taskNames[0].equals("genVSCodeRuns")
}

def shouldCheckEnv() {
    return findProject(':AntimatterAPI') != null || findProject(':TesseractAPI') != null
}

def getEnv() {
    boolean vscode = isVSTask()
    String resourcePath = vscode ? 'bin/main' : 'build/resources/main'
    String codePath = vscode ? 'bin/main' : 'build/classes/java/main'
    String s = "gt4r%%${project.file(resourcePath)}" + getPathSeparator() + "gt4r%%${project.file(codePath)}"
    if (findProject(':AntimatterAPI') != null) {
        s += getPathSeparator() + "antimatter%%${project(':AntimatterAPI').file(resourcePath)}" + getPathSeparator() + "antimatter%%${project(':AntimatterAPI').file(codePath)}"
    }
    if (findProject(':TesseractAPI') != null) {
        s += getPathSeparator() + "tesseract%%${project(':TesseractAPI').file(resourcePath)}" + getPathSeparator() + "tesseract%%${project(':TesseractAPI').file(codePath)}"
    }
    return s
}
import org.apache.tools.ant.taskdefs.condition.Os
import org.gradle.api.JavaVersion
import org.gradle.api.tasks.compile.JavaCompile

def getPathSeparator() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return ";"
    }
    return ":"
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: "1.16.5"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    //accessTransformer = file('AntimatterAPI/src/main/resources/META-INF/accesstransformer.cfg')
    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'DEBUG'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'DEBUG'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=gt4r.mixins.json"
            if (findProject(':AntimatterAPI') != null) arg "-mixin.config=antimatter.mixins.json"
            if (shouldCheckEnv()) {
                environment 'MOD_CLASSES', getEnv()
            }

            mods {
                gt4r {
                    source sourceSets.main
                }
            }
        }

        client2 {
            parent(null, "client")
            workingDirectory project.file('run/2')
            args '--username', 'Dev2'
        }

        server {
            workingDirectory project.file('run/server')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'DEBUG'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            //jvmArgs '-javaagent:/opt/JavaHot/hotswap-agent.jar -XX:TraceRedefineClasses=1'
            //Comment this if you aren't developing against antimatter locally.

            if (findProject(':AntimatterAPI') != null) arg "-mixin.config=antimatter.mixins.json"
            arg "-mixin.config=gt4r.mixins.json"
            if (shouldCheckEnv()) {
                environment 'MOD_CLASSES', getEnv()
            }

            mods {
                gt4r {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'DEBUG'
            //jvmArgs '-javaagent:/opt/JavaHot/hotswap-agent.jar -XX:TraceRedefineClasses=1'
            //Comment this if you aren't developing against antimatter locally.
            if (findProject(':AntimatterAPI') != null) arg "-mixin.config=antimatter.mixins.json"

            if (shouldCheckEnv()) {
                environment 'MOD_CLASSES', getEnv()
            }
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=gt4r.mixins.json"
            args '--mod', 'gt4r', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')

            mods {
                gt4r {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation 'org.apache.commons:commons-collections4:4.4'

    runtimeOnly fg.deobf("curse.maven:world_stripper-250603:3142092")
    runtimeOnly fg.deobf("curse.maven:world_edit-225608:3172951")
    runtimeOnly fg.deobf("curse.maven:spartan_weaponry-278141:3164046")
    runtimeOnly fg.deobf("curse.maven:top-245211:${top_file}")
    runtimeOnly fg.deobf("curse.maven:mmmm-225738:3279930")
    runtimeOnly fg.deobf("curse.maven:rhino-416294:${rhino_file}")
    runtimeOnly fg.deobf("curse.maven:architectury-forge-419699:${architectury_file}")
    runtimeOnly fg.deobf("curse.maven:kubejs-238086:${kubejs_file}")
    runtimeOnly fg.deobf("curse.maven:bluepower-223099:3375771")
    runtimeOnly fg.deobf("curse.maven:spartan_weaponry-278141:3164046")

//    if (findProject(':AntimatterAPI') != null) {
    //implementation project(path: ':AntimatterAPI')
    //   } else {
    //compileOnly sources jar.
    //       runtimeOnly fg.deobf("com.github.GregTech-Intergalactical:AntimatterAPI:${antimatter_version}")
    //       compileOnly ("com.github.GregTech-Intergalactical:AntimatterAPI:${antimatter_version}")
    //   }
    implementation fg.deobf("com.github.GregTech-Intergalactical:TesseractAPI:${tesseract_version}")

    implementation fg.deobf("com.github.GregTech-Intergalactical:AntimatterAPI:${antimatter_version}")
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

    //compile 'de.speiger:Primitive-Collections:0.4.0'

    //runtimeOnly fg.deobf("com.github.Trinsdar:GT-Spartan:7634a8d6de")//3ad506467f

    compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")
}


// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
//jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(jar) {
                builtBy jar
            }
        }
    }
    repositories {
    }
}

apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "gt4r.refmap.json"
}

jar {
    zip64 true
    manifest {
        attributes([
                "MixinConfigs": "gt4r.mixins.json",
                "Specification-Title": project.name,
                "Specification-Vendor": "GT4 Reimagined",
                "Specification-Version": project.version,
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "GT4 Reimagined",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

processResources {
    exclude('gtuassets1.14')
    exclude('assets/gt4r/textures/old_textures')

    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}
